[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "cedt"
dynamic = ["version"]
description = "Circular Economy Digital Twin with Predictive Refill Intelligence"
authors = [
    {name = "CEDT Team", email = "team@cedt.ai"},
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Distributed Computing",
]
keywords = ["circular-economy", "digital-twin", "sustainability", "ai", "blockchain", "quantum", "machine-learning"]

dependencies = [
    "fastapi>=0.104.1",
    "uvicorn>=0.24.0",
    "pydantic>=2.5.0",
    "scikit-learn>=1.3.2",
    "statsmodels>=0.14.0",
    "pandas>=2.1.3",
    "numpy>=1.24.3",
    "tensorflow>=2.15.0",
    "dwave-ocean-sdk>=6.9.0",
    "kafka-python>=2.0.2",
    "web3>=6.12.0",
    "paho-mqtt>=1.6.1",
    "sqlalchemy>=2.0.23",
    "dowhy>=0.10.1",
    "requests>=2.31.0",
    "python-dotenv>=1.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "black>=23.11.0",
    "flake8>=6.1.0",
    "isort>=5.12.0",
    "pre-commit>=3.5.0",
    "mypy>=1.7.0",
]

docs = [
    "sphinx>=7.2.0",
    "sphinx-rtd-theme>=1.3.0",
    "sphinxcontrib-asyncio>=0.3.0",
]

quantum = [
    "dwave-ocean-sdk>=6.9.0",
    "qiskit>=0.45.0",
    "cirq>=1.2.0",
]

blockchain = [
    "web3>=6.12.0",
    "eth-account>=0.10.0",
    "brownie-eth>=1.19.0",
]

[project.urls]
Homepage = "https://github.com/your-org/cedt"
Documentation = "https://cedt.readthedocs.io/"
Repository = "https://github.com/your-org/cedt"
"Bug Reports" = "https://github.com/your-org/cedt/issues"

[project.scripts]
cedt-server = "cedt.api.main:main"
cedt-worker = "cedt.workers.main:main"
cedt-setup = "cedt.setup:setup_environment"

[tool.setuptools_scm]
write_to = "app/cedt/_version.py"

[tool.setuptools.packages.find]
where = ["app"]

[tool.setuptools.package-data]
cedt = ["config/*.yaml", "data/*.json", "static/*", "templates/*"]

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
known_first_party = ["cedt"]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "E266", "E501", "W503"]
max-complexity = 10
select = ["B", "C", "E", "F", "W", "T4", "B9"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.4"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "quantum: marks tests that require quantum computing resources",
    "blockchain: marks tests that require blockchain connectivity",
]

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/conftest.py",
    "*/__init__.py",
    "*/migrations/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]